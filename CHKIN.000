***********************
* RacWare check in for symbol 3240
* DL-EGE
* 12.20.98: open & close tables as needed
* 01.28.00: open & close db on demand
* 02.20.02: save rental calculation subtotals
***********************
set confirm on

private yfil, yntx1, yntx2, yntx3
* declare local var for printing purpose
private l_fmlg, l_fmlgs, l_fmlgtot, l_fmlgchg
private l_fhr, l_fhrchg, l_fhrtot
private l_fdly, l_fdlychg, l_fdlytot
private l_fwk, l_fwkchg, l_fwktot
private l_fwkd, l_fwkdtot
private l_fmth, l_fmthchg, l_fmthtot

@ 06, 03 say "Please Wait..."
declare l_FAUTHCD1,l_FCALDAY,l_FCCEXP1,l_FCCNUM1,l_FCDW,l_FCDWTAX   
declare l_FCLASS,l_FCUSTNO,l_FDATEIN,l_FDATEOUT,l_FDAYS,l_FDBACCT1  
declare l_FDEPAMT,l_FDISC,l_FDLYCHG,l_FDLYMLG,l_FEFUELIN,l_FEFUELOUT 
declare l_FEFUELTOT,l_FEMLG,l_FEMLGIN,l_FEMLGOUT,l_FEMLGS,l_FFNAME    
declare l_FFUELOUT,l_FHLDAMT,l_FHRCHG,l_FID1,l_FLNAME,l_FLOC,l_FMLGCHG   
declare l_FMLGOUT,l_FMTHCHG,l_FMTHMLG,l_FODLY1,l_FODLY2,l_FODLY3,l_FODLY4    
declare l_FOITEM1,l_FOITEM2,l_FOITEM3,l_FOITEM4,l_FORATE1,l_FORATE2   
declare l_FORATE3,l_FORATE4,l_FOTAX1,l_FOTAX2,l_FOTAX3,l_FOTAX4
declare l_FOTOT1,l_FOTOT2,l_FOTOT3,l_FOTOT4
declare l_FPAI,l_FPAITAX,l_FPAYCOD1,l_FPAYTYP1,l_FRANO,l_FRATE,l_FRESVNO,l_FRLOC     
declare l_FSTAMP,l_FTAX,l_FTIMEIN,l_FTIMEOUT,l_FTMTYP,l_FUCLASS,l_FULIC     
declare l_FUNIT,l_FWKCHG,l_FWKDCHG,l_FWKDDAY,l_FWKDMAX,l_FWKDMIN,l_FWKDMLG   
declare l_FWKMLG,l_FMILEAGE,l_FSURCHG,l_FOTHCHG   
*
do while .t.
   @ 06, 03 say "Please Wait..."
   *
   clear
   @ 00, 01 say "Unit :"
   @ 01, 01 say "Ra   :"
   @ 02, 01 say "Name :"
   @ 03, 01 say "Out  :"
   @ 04, 01 say "In   :"
   @ 05, 01 say "Fuel :"
   @ 05, 12 say "/8"

   l_frano = 0
   l_fmlgin = 0
   l_ffuelin = 0
   l_funit = space(10)

   @ 00, 08 get l_funit pict "!!!!!!!!!!" valid f_ckunit ()
   @ 04, 08 get l_fmlgin  pict "999999" valid f_ckmlg ()
   @ 05, 08 get l_ffuelin pict "9" valid f_calrate ()
   if f_rd () = 27 .or. empty(l_funit)
      exit
   *elseif lastkey () = 27
   *   if raagr->frastat = "X"
   *      select raagr
   *      reclock ()
   *      replace frastat with " "
   *      commit
   *      unlock
   *   endif
   endif
   *close data
   *
enddo

*******************
* 08.20.06
function f_ckmlg

if lastkey () = 5 .or. empty (l_funit)
   return .t.
endif

return f_valid (l_fmlgin > l_fmlgout)

******************
function f_calrate

if lastkey () = 5 .or. empty (l_funit)
   return .t.
endif

l_ftmetot = 0
l_fmlgtot = 0
l_fdisctot = 0
l_fcdwtot = 0
l_fpaitot = 0
l_ffueltot = 0
l_fsurchg = 0
l_fothtot1 = 0
l_fothtot2 = 0
l_ftaxtot = 0
l_ftotal = 0
l_famtdue = 0
l_fname = alltrim(l_ffname)+" "+alltrim(l_flname)
l_fdatein = gdate
l_ftimein = substr(time(),1,5)
do cal_tnm
@ 06, 01 say "Total: "+alltrim(str(l_ftotal,8,2))
@ 07, 01 say "<Enter> | <Esc> "
yans = inkey(0)
if yans = 13 .or. yans = 49
   * Print ra
   do rrprint
   do while .t.
      @ 07, 01 say "1> Print | 2> Exit"
      yans = inkey(0)
      if yans = asc("1")
         @ 07, 01 say "Please Wait...    "
         do rrprint
      elseif yans = asc ("2")
         exit
      endif
   enddo
   *
   @ 07, 00 clear to 07, 20
   @ 07, 01 say "UPDATING UNIT....."
   yfil = gpath + "ravm.dbf"
   if .not. file (yfil)
      f_valid (.f., "Connection Lost...")
      return .f.
   endif
   yntx1 = gpath + "ravm1"
   yntx2 = gpath + "ravm2"
   yntx3 = gpath + "ravm3"
   select 0
   use &yfil index &yntx1, &yntx2, &yntx3 alias ravm
   select ravm 
   seek l_funit
   if .not. eof ()
      reclock ()
      if .not. empty (freason)
         replace fstatus with "H"
      else
         replace fstatus with "I"
      endif
      replace floc with gloc
      replace futime with dtos (l_fdatein) + l_ftimein
      replace fcurra with 0, frenter with " "
      replace flastra with l_frano, fckindt with l_fdatein
      replace fmileage with l_fmlgin, fdueback with ctod ("  /  /  ")
      commit
      unlock
   endif
   use
   *
   @ 07, 00 clear to 07, 20
   @ 07, 01 say "UPDATING TRANSIT.."
   yfil = gpath + "raagrt.dbf"
   if .not. file (yfil)
      f_valid (.f., "Connection Lost...")
      return .f.
   endif
   yntx1 = gpath + "raagrt"
   select 0 
   use &yfil index &yntx1 alias raagrt
   select raagrt
   seek l_floc+str(l_frano,6)
   if eof ()
      seek space(10)+str(0,6)
      if eof ()
         append blank
      endif
   endif
   reclock ()
   replace FLOC with l_floc, FRANO with l_frano, FUNIT with l_funit     
   replace FRLOC with gloc
   replace FDATEIN with l_fdatein, FTIMEIN with l_ftimein, FDAYS with l_fdays
   replace FMLG with l_fmlg, FDEPAMT with l_fdepamt, FDISCTOT with l_fdisctot
   replace FCDWTOT with l_fcdwtot, FPAITOT with l_fpaitot, FFUELTOT with l_ffueltot
   replace FTMETOT with l_ftmetot, FMLGTOT with l_fmlgtot, FSURCHG with l_fsurchg
   replace FTAXTOT with l_ftaxtot, FTOTAL with l_ftotal
   replace FOITEM1 with l_foitem1, FOITEM2 with l_foitem2, FOITEM3 with l_foitem3
   replace FOITEM4 with l_foitem4, FOTOT1 with l_fotot1, FOTOT2 with l_fotot2
   replace FOTOT3 with l_fotot3, FOTOT4 with l_fotot4, FNAME with l_fname
   * 02.20.02
   replace fhr with l_fhr, fhrtot with l_fhrtot
   replace fdly with l_fdly, fdlytot with l_fdlytot
   replace fwk with l_fwk, fwktot with l_fwktot
   replace fwkd with l_fwkd, fwkdtot with l_fwkdtot
   replace fmth with l_fmth, fmthtot with l_fmthtot
   replace ffuelout with l_ffuelout, ffuelin with l_ffuelin
   *
   commit
   unlock
   use
   *
   @ 06, 00 clear to 07, 20
   return .t.
else
   * release open ra
   *select raagr
   *seek l_funit
   *if .not. eof ()
   *   reclock ()
   *   replace frastat with " "
   *   commit
   *   unlock
   *endif
   @ 06, 00 clear to 07, 20
   keyboard chr(5)
   return .f.
endif

******************
function f_ckunit
private yfil, yntx1, yflg

if empty(l_funit)
   return .t.
endif

yflg = .t.
yfil = gpath + "raagr.dbf"
if .not. file (yfil)
   f_valid (.f., "Connection Lost...")
   return .f.
endif
yntx1 = gpath + "raagr3"      && by unit #
select 0
use &yfil index &yntx1 alias raagr

select raagr
seek l_funit 
if eof ()
   f_valid (.f., "Invalid Unit #....")
   l_funit = space(10)
   yflg = .f.
elseif raagr->frastat = "X"
   f_valid (.f., "RA in Transit...")
   l_funit = space(10)
   yflg = .f.
elseif .not.empty(raagr->fremark)
   f_valid (.f., "Pending Message...")
   l_funit = space(10)
   yflg = .f.
elseif raagr->fdateout > gdate
   f_valid (.f., "Invalid Date...")
   l_funit = space(10)
   yflg = .f.
else
   * mark open ra
   *reclock ()
   *replace frastat with "X"
   *commit
   *unlock
   *
   l_FAUTHCD1 = FAUTHCD1  
   l_FCALDAY  = FCALDAY   
   l_FCCEXP1  = FCCEXP1   
   l_FCCNUM1  = FCCNUM1   
   l_FCDW     = FCDW      
   l_FCDWTAX  = FCDWTAX   
   l_FCLASS   = FCLASS    
   l_FCUSTNO  = FCUSTNO   
   l_FDATEIN  = FDATEIN   
   l_FDATEOUT = FDATEOUT  
   l_FDAYS    = FDAYS     
   l_FDBACCT1 = FDBACCT1  
   l_FDEPAMT  = FDEPAMT   
   l_FDISC    = FDISC     
   l_FDLYCHG  = FDLYCHG   
   l_FDLYMLG  = FDLYMLG   
   l_FEFUELIN = FEFUELIN  
   l_FEFUELOUT= FEFUELOUT 
   l_FEFUELTOT= FEFUELTOT 
   l_FEMLG    = FEMLG     
   l_FEMLGIN  = FEMLGIN   
   l_FEMLGOUT = FEMLGOUT  
   l_FEMLGS   = FEMLGS    
   l_FFNAME   = FFNAME    
   l_FFUELOUT = FFUELOUT  
   l_FHLDAMT  = FHLDAMT   
   l_FHRCHG   = FHRCHG    
   l_FID1     = FID1      
   l_FLNAME   = FLNAME    
   l_FLOC     = FLOC      
   l_FMLGCHG  = FMLGCHG   
   l_FMLGOUT  = FMLGOUT   
   l_FMTHCHG  = FMTHCHG   
   l_FMTHMLG  = FMTHMLG   
   l_FODLY1   = FODLY1    
   l_FODLY2   = FODLY2    
   l_FODLY3   = FODLY3    
   l_FODLY4   = FODLY4    
   l_FOITEM1  = FOITEM1   
   l_FOITEM2  = FOITEM2   
   l_FOITEM3  = FOITEM3   
   l_FOITEM4  = FOITEM4   
   l_FORATE1  = FORATE1   
   l_FORATE2  = FORATE2   
   l_FORATE3  = FORATE3   
   l_FORATE4  = FORATE4   
   l_FOTAX1   = FOTAX1    
   l_FOTAX2   = FOTAX2    
   l_FOTAX3   = FOTAX3    
   l_FOTAX4   = FOTAX4    
   l_FPAI     = FPAI      
   l_FPAITAX  = FPAITAX   
   l_FPAYCOD1 = FPAYCOD1  
   l_FPAYTYP1 = FPAYTYP1  
   l_FPHONE   = FPHONE    
   l_FRANO    = FRANO     
   l_FRATE    = FRATE     
   l_FRESVNO  = FRESVNO   
   l_FRLOC    = gloc     
   l_FSTAMP   = FSTAMP    
   l_FTAX     = FTAX      
   l_FTIMEIN  = FTIMEIN   
   l_FTIMEOUT = FTIMEOUT  
   l_FTMTYP   = FTMTYP    
   l_FUCLASS  = FUCLASS   
   l_FULIC    = FULIC     
   l_FUNIT    = FUNIT     
   l_FWKCHG   = FWKCHG    
   l_FWKDCHG  = FWKDCHG   
   l_FWKDDAY  = FWKDDAY   
   l_FWKDMAX  = FWKDMAX   
   l_FWKDMIN  = FWKDMIN   
   l_FWKDMLG  = FWKDMLG   
   l_FWKMLG   = FWKMLG    
   l_FMILEAGE = FMILEAGE  
   l_FSURCHG  = FSURCHG   
   l_FOTHCHG  = FOTHCHG   
   *
   @ 01, 08 say alltrim(str(l_frano,6))
   @ 02, 08 say f_truncate (alltrim(l_flname)+","+substr(alltrim(l_ffname),1,1),12)
   @ 03, 08 say str(l_fmlgout,6)
endif
select raagr
use
return yflg

******************************
* time and mileage calculation
******************************
procedure cal_tnm
private y1, y2, y3, yto, yti, yrtot, yfdays, yfhr
private ymhr, ytotd, ytotw, ytotm, yrdays, yrwk, yrmlg, yrmlgd, yrmlgw, yrmlgm

store 0 to l_fdlytot, l_fwkdtot, l_fwktot, l_fmthtot, l_fhrtot

yto = val (substr (l_ftimeout, 1, 2)) * 60 + ;
   val (substr (l_ftimeout, 4, 2))
yti = val (substr (l_ftimein, 1 ,2)) * 60 + val (substr (l_ftimein, 4, 2))
ymins = (l_fdatein - l_fdateout) * 24 * 60 + yti - yto
if l_fhrchg = 0 .or. l_fdlychg > 0 .or. l_fwkdchg > 0 .or.   ;
   l_fwkchg > 0 .or. l_fmthchg > 0
   l_fdays = int (ymins / 1440)
   ymins = ymins - l_fdays * 1440
else
   l_fdays = 0
endif
if l_fdays < 1  .and. l_fdlychg > 0 
   l_fdays = 1
   ymins = 0
endif
* 
if ggraceins
   ydaychg = if(ymins<=ggracehr,l_fdays,l_fdays + 1)
else
   ydaychg = if(ymins<=0,l_fdays,l_fdays + 1)
endif

if ymins <= ggracehr
   ymins = 0
elseif ggracefr
   ymins = ymins - ggracehr
endif

l_fhr = int (ymins / 60)
ymins = ymins - l_fhr * 60
if ymins > 0
   if l_fhr >= 23 .and. l_fdlychg > 0 
      l_fdays = l_fdays + 1
      l_fhr = 0
   else
      l_fhr = l_fhr + 1
   endif
   ymins = 0
endif

l_fcdwdays = ydaychg
l_fpaidays = ydaychg
l_fcdwtot = l_fcdwdays * l_fcdw
l_fpaitot = l_fpaidays * l_fpai

l_fmlg = l_fmlgin - l_fmlgout
l_fmlgs = l_fmlg + l_femlgs
l_frhr = l_fhr
l_fdly = l_fdays

if (l_fhr * l_fhrchg) >= l_fdlychg .and. l_fdlychg > 0
   l_fdly = l_fdly + 1
   l_fhr = 0
endif

l_fwkd = 0
if l_fwkdday .and. l_fwkdchg > 0.00
   if l_fdly >= l_fwkdmin
      if l_fdly < l_fwkdmax
         l_fwkd = l_fdly
         l_fwkdtot = l_fwkdchg * l_fdly
         l_fdly = 0
         if (l_fhr * l_fhrchg) >= l_fwkdchg
            l_fwkd = l_fwkd + 1
            l_fhr = 0
         endif
      else
         l_fwkd = l_fwkdmax
         l_fdly = l_fdly - l_fwkdmax
         l_fwkdtot = l_fwkdchg * l_fwkdmax
      endif
   elseif l_fdly = (l_fwkdmin - 1) .and. ;
         (l_fdly * l_fdlychg + l_fhr * l_fhrchg) >= (l_fwkdmin * l_fwkdchg)
      l_fwkd = l_fwkdmin
      l_fwkdtot = l_fwkd * l_fwkdchg
      l_fdly = 0
      l_fhr = 0
   endif
endif

store 99999.99 to ytotd, ytotw, ytotm, yrtot

yfdays = l_fdly
yfhr = l_fhr              && save for week/month calc.

* estimate daily chg 01/07/95:(edc)
if l_fdlychg > 0.00
   if l_fdlymlg = 0       && unlimited
      yrmlgd = 0
   else
      yrmlg = l_fmlgs - (l_fdlymlg * l_fdly) 
      yrmlgd = if(yrmlg > 0, yrmlg * l_fmlgchg, 0)
   endif
   ytotd = l_fdly * l_fdlychg + l_fhr * l_fhrchg + yrmlgd
   yrtot = ytotd
endif

ylowrchg = .t.          && assume to be true
yrdays = l_fdly
yrhr = l_fhr
* estimate weekly chg 01/07/95:(edc)
l_fwk = 0
if l_fwkchg > 0.00       &&  .and. (l_ftmtyp = 3 .or. ylowrchg)
   if ylowrchg
      l_fwk = int (yfdays/7)
      l_fdly = yfdays - l_fwk * 7
      l_fhr = yfhr
      if l_fdly * l_fdlychg + l_fhr * l_fhrchg > l_fwkchg
         l_fwk = l_fwk + 1
         l_fdly = 0
         l_fhr = 0
      endif
      if l_fdly > 0 .and. l_fdlychg <= 0
         l_fwk = l_fwk + 1
         l_fdly = 0
         l_fhr = 0
      endif
      if l_fwkmlg = 0       && unlimited
         yrmlgw = 0
      else
         * compare weekly charge taking into account of mileage calc.
         yrmlg = l_fmlgs - ((l_fwkmlg * l_fwk) + (l_fdlymlg * l_fdly)) 
         yrmlgw = if(yrmlg > 0, yrmlg * l_fmlgchg, 0)
      endif
      if l_fwk > 0
         ytotw = l_fwk * l_fwkchg + l_fdly * l_fdlychg +   ;
                 l_fhr * l_fhrchg + yrmlgw
         if ytotw > ytotd
            l_fwk = 0
            l_fdly = yrdays 
            l_fhr = yrhr
         else
            yrtot = ytotw
         endif
      else
         * restore old values
         l_fdly = yrdays 
         l_fhr = yrhr
      endif

   elseif l_ftmtyp = 3
      do while l_fdly >= ygwkmin
         l_fwk = l_fwk + 1
         l_fdly = l_fdly - ygwkmax
         if l_fdly < 0
            l_fhr = 0
            l_fdly = 0
         endif
      enddo
   endif
   l_fwktot = l_fwkchg * l_fwk
else
   l_fwktot = 0.00
endif

* estimate monthly chg 01/07/95:(edc)
yrwk = l_fwk
yrdays = l_fdly
yrhr = l_fhr
l_fmth = 0
if l_fmthchg > 0.00         && .and. (l_ftmtyp = 4 .or. ylowrchg)
   if ylowrchg
   * 01/07/95: (edc) stll need to compare mileage....
      l_fmth = int (yfdays/30)
      l_fdly = yfdays - l_fmth * 30
      l_fwk = int (l_fdly/7)
      l_fdly = l_fdly - l_fwk * 7
      l_fhr = yfhr          && restore org. hr.
      if l_fdly * l_fdlychg + l_fhr * l_fhrchg > l_fwkchg
         l_fwk = l_fwk + 1
         l_fdly = 0
         l_fhr = 0
      endif
      if l_fdly > 0 .and. l_fdlychg <= 0 
         l_fwk = l_fwk + 1
         l_fdly = 0
         l_fhr = 0
      endif 
      if l_fwk * l_fwkchg + l_fdly * l_fdlychg + l_fhr * l_fhrchg > l_fmthchg
         l_fmth = l_fmth + 1
         l_fwk = 0
         l_fdly = 0
         l_fhr = 0
      endif
      if l_fmthmlg = 0       && unlimited
         yrmlgm = 0
      else
         * compare monthly charge taking into account of mileage calc.
         yrmlg = l_fmlgs - ((l_fmthmlg * l_fmth) + (l_fwkmlg * l_fwk) +  ;
                            (l_fdlymlg * l_fdly)) 
         yrmlgm = if(yrmlg > 0, yrmlg * l_fmlgchg, 0)
      endif
      if l_fmth > 0
         ytotm = l_fmth * l_fmthchg + l_fwk * l_fwkchg +    ;
                 l_fdly * l_fdlychg + l_fhr * l_fhrchg + yrmlgm
         if ytotm > yrtot 
            * restore old values
            l_fmth = 0
            l_fwk = yrwk
            l_fdly = yrdays 
            l_fhr = yrhr
         else
            l_fdly = yfdays - (l_fmth * 30) - (l_fwk * 7)
            l_fdly = if(l_fdly > 0, l_fdly, 0)
            l_fwktot = l_fwk * l_fwkchg
         endif
      else
         l_fwk = yrwk
         l_fdly = yrdays 
         l_fhr = yrhr
      endif

   elseif l_ftmtyp = 4
      do while l_fdly >= ygmthmin
         l_fmth = l_fmth + 1
         l_fdly = l_fdly - ygmthmax
         if l_fdly < 0
            l_fhr = 0
            l_fdly = 0
         endif
      enddo
   endif
   l_fmthtot = l_fmthchg * l_fmth
else
   l_fmthtot = 0.00
endif

if l_fdlychg > 0.00
   l_fdlytot = l_fdlychg * l_fdly
elseif l_fwkchg > 0.00
   if l_fdly > 0      && 01/10/94:(edc)  
      l_fwk = l_fwk + 1
      l_fwktot = l_fwktot + l_fwkchg
      l_fdly = 0
      l_fhr = 0 
   endif
elseif l_fmthchg > 0
   if l_fdly > 0.00 .or. l_fwk > 0.00
      l_fmth = l_fmth + 1
      l_fmthtot = l_fmthtot + l_fmthchg
      l_fwk = 0
      l_fdly = 0
      l_fhr = 0
   endif
endif
l_fhrtot = l_fhr * l_fhrchg
l_ftmetot = l_fdlytot + l_fwkdtot + l_fwktot + l_fmthtot + l_fhrtot

l_fmlgfree = 0
if l_fwkd > 0
   if l_fwkdmlg = 0
      l_fmlgfree = l_fmlgs
   elseif l_fwkdmlg > 1
      l_fmlgfree = l_fmlgfree + l_fwkd * l_fwkdmlg
   endif
endif
if l_fdly > 0
   if l_fdlymlg = 0
      l_fmlgfree = l_fmlgs
   elseif l_fdlymlg > 1
      l_fmlgfree = l_fmlgfree + l_fdly * l_fdlymlg
   endif
endif
if l_fwk > 0
   if l_fwkmlg = 0
      l_fmlgfree = l_fmlgs
   elseif l_fwkmlg > 1
      l_fmlgfree = l_fmlgfree + l_fwk * l_fwkmlg
   endif
endif
if l_fmth > 0
   if l_fmthmlg = 0
      l_fmlgfree = l_fmlgs
   elseif l_fmthmlg > 1
      l_fmlgfree = l_fmlgfree + l_fmth * l_fmthmlg
   endif
endif

if l_fmlgfree >= l_fmlgs
   l_fmlgs = 0
else
   l_fmlgs = l_fmlgs - l_fmlgfree
endif
l_fmlgtot = l_fmlgs * l_fmlgchg
l_fdisctot = round (l_fdisc * (l_ftmetot + l_fmlgtot) / 100.00, 2)
l_fcdwtot = l_fcdwdays * l_fcdw
l_fpaitot = l_fpaidays * l_fpai

* Calculate other charge
l_fothtot1 = 0
l_fothtot2 = 0
l_fpo = .f.                && fuel purchase option

for i = 1 to 4 
   ystr1 = "L_FOITEM" + str (i, 1)
   if  &ystr1 = "FPO"     && Fuel purchase option
      ystr2 = "L_FORATE" + str (i, 1)
      l_fpo = if(&ystr2 > 0, .t., .f.)
   endif
   *
   ystr1 = "L_FORATE" + str (i, 1)
   ystr2 = "L_FODLY" + str (i, 1)
   if &ystr2
      ychg = &ystr1 * ydaychg
   else
      ychg = &ystr1
   endif
   ystr2 = "L_FOTOT" + str (i, 1)
   &ystr2 = ychg
   ystr1 = "L_FOTAX" + str (i, 1)
   if &ystr1
      l_fothtot1 = l_fothtot1 + ychg
   else
      l_fothtot2 = l_fothtot2 + ychg
   endif
next 

* Calculate fuel charge
l_ffueltot = 0
if .not. l_fpo
   yfil = gpath + "ravm.dbf"
   if .not. file (yfil)
      f_valid (.f., "Connection Lost...")
      close all
      quit
   endif
   yntx1 = gpath + "ravm1"
   select 0
   use &yfil index &yntx1 alias ravm
   select ravm
   seek l_funit
   if found ()
      if l_fmlgin - l_fmlgout > 50
         if l_ffuelin < l_ffuelout
            l_ffueltot = l_ffueltot + round (ftank * (l_ffuelout - l_ffuelin) / ;
               8 * gfuelchg, 2)
         endif
      elseif fepa > 0  
         l_ffueltot = l_ffueltot + round ((l_fmlgin - l_fmlgout) / ;
            fepa * gfuelchg, 2)
      endif
   endif
   select ravm
   use
endif

* Calculate surcharge
if empty(gsurchg)
   l_fsurchg = 0
else
   l_fsurchg = &gsurchg
endif
if .not. empty(gsurchg1)
   ychg = &gsurchg1
   if gsurtx1
      l_fothtot1 = l_fothtot1 + ychg
   else
      l_fothtot2 = l_fothtot2 + ychg
   endif
endif
*
l_fcredtot = 0
*
ytot1 = l_ftmetot + l_fmlgtot - l_fdisctot + if (l_fcdwtax, l_fcdwtot, 0.00) ;
    + if (l_fpaitax, l_fpaitot, 0.00) + if (gfueltx, l_ffueltot, 0.00)  ;
    + if (gsurtx, l_fsurchg, 0.00) + l_fothtot1 - l_fcredtot
l_ftaxtot = round (ytot1 * l_ftax / 100.00, 2)

ytot2 = if (l_fcdwtax, 0.00, l_fcdwtot) + if (l_fpaitax, 0.00, l_fpaitot) ;
   + if (gsurtx, 0.00, l_fsurchg) + l_fothtot2   ;
   + if (gfueltx, 0.00, l_ffueltot) 
l_ftotal = round (ytot1 + ytot2 + l_ftaxtot, 2)
l_famtdue = round (l_ftotal - l_fdepamt, 2)


